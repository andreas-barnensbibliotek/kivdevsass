<?php

/**
 * Implements hook_init().
 */
function kiv_mod_init() {

  define("AREA_VID", 2);

 /* if (strpos($_SERVER['SERVER_NAME'], 'kodamera.dev') !== FALSE ) {
    // Add .js-file with Kodamera token.
    drupal_add_js('http://fast.fonts.com/jsapi/61686109-f220-40de-99ac-484e00f6006e.js', 'external');
  }
  
  else {
  */  // Add .js-file with KIV token.
    //drupal_add_js('http://fast.fonts.com/jsapi/085f8d62-8591-4fba-80a2-a4c05e7b90a4.js', 'external');
 // }

  // add css file for KIV alter admin theme output etc.
  drupal_add_css(drupal_get_path('module', 'kiv_mod') . '/css/kiv_mod_styles.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));

  // add css file to target IE7 and below
  drupal_add_css(drupal_get_path('theme', 'kiv_responsive') . '/css/ie7.css', array(
    'group' => CSS_DEFAULT,
    'browsers' => array(
      'IE' => 'lte IE 8',
      '!IE' => FALSE),
    'preprocess' => FALSE)
  );
}

/**
 * Implements hook_permission().
 */
function kiv_mod_permission() {
  $permissions = array(
    'access workbench admin' => array(
      'title' => t('Access Workbench Admin'),
    ),
    'access full toolbar' => array(
      'title' => t('Access Full Toolbar'),
    ),
  );
  return $permissions;
}


/**
 * Implements hook_menu().
 */
function kiv_mod_menu() {
  $items = array();
  $items['admin/workbench/admin'] = array(
    'title' => 'Editor tools',
    'page callback' => 'kiv_mod_admin',
    'access arguments' => array('access workbench admin'),
    'weight' => 50,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}
function kiv_mod_admin() {
  $menu = menu_tree('menu-admin-menu');
  $menuhtml = drupal_render($menu);
  if (!empty($menuhtml)) {
    return $menuhtml;
  } else {
    return t('Empty page');
  }
}

/**
 * Implements hook_block_info().
 */
function kiv_mod_block_info() {
  $blocks['pagetitle_image'] = array(
    'info' => t('KIV: Page Title (image)'),
  );
  $blocks['share'] = array(
    'info' => t('KIV: Share block'),
  );
  $blocks['senaste_nytt'] = array(
    'info' => t('KIV: Latast news on a area'),
  );
  $blocks['search'] = array(
      'info' => t('Search'),
      'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_clone_node_alter(&$node, $context).
 */
// If a user does not have access to a cloned node category, the category is altered to fit
// the first of the users's category permissions.
function kiv_mod_clone_node_alter(&$node, $context) {

  // Get the global user object and check for the user's workbench area permissions.
  global $user;
  $access_tree = workbench_access_get_user_tree($user);
  $access_tree_keys = array_keys($access_tree);

  // Abort if we have access to to current key.
  $matches = array_intersect($node->workbench_access, $access_tree_keys);
  if (!empty($matches)) return;

  // Remove any array keys that contain non-numerical values.
  foreach($access_tree_keys as $index => $key) {
    if(!is_int($key))
      unset($access_tree_keys[$index]);
  }

  // Set the array pointer to start from scratch (array key 0)
  reset($access_tree_keys);

  // If the user has any access to categories, and non of the categories matches the cloned node,
  // then set the category of the new node to the first match of the user category access permissions.
  if (isset($access_tree_keys) && !empty($access_tree_keys)) {
    $first_access_key = current($access_tree_keys);
    $node->field_category['und'][0]['tid'] = $first_access_key;
    $node->workbench_access = array($first_access_key => $first_access_key);
  }

}

function kiv_mod_clone_access_alter(&$access, $node) {

  $type = $node->type;
  if (user_access("create $type content") && (user_access("edit own $type content") || user_access("edit any $type content"))) {
    $access = true;
  } else {
    $access = false;
  }

}

/**
 * Implements hook_block_view().
 */
function kiv_mod_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'pagetitle_image':
        $block['subject'] = t('Page Title (image)');
        $block['content'] = kiv_mod_pagetitle_image();
      break;
    case 'share':
        $block['subject'] = t('Share links');
        $block['content'] = kiv_mod_share_view();
      break;
    case 'senaste_nytt':
      $block['subject'] = t('Latest news');
      $block['content'] = kiv_mod_latest_news_view();
      break;
    case 'search':
      $block['subject'] = t('Search');
      $block['content'] = drupal_get_form('kiv_mod_search_box_form');
      break;
  }
  return $block;
}

/**
 * Callback for pagetitle_image block.
 */
function kiv_mod_pagetitle_image() {

  $menu_trail = menu_get_active_trail();
  $theme_path = drupal_get_path('theme', 'kiv_responsive');

  if (isset($menu_trail[1])) {

    // Default level 1
    $title = isset($menu_trail[1]['link_title']) ? $menu_trail[1]['link_title'] : '';
    $link_path = isset($menu_trail[1]['href']) ? $menu_trail[1]['href'] : '';

    // If there is a term link path with AREA VID in our trail we use this as a title.
    foreach($menu_trail as $item) {

      $_link_path = isset($item['link_path']) ? $item['link_path'] : '';
      $path = explode('/', $_link_path);

      if ($path[0] == 'taxonomy' && $path[1] == 'term' && is_numeric($path[2])) {
        $term = taxonomy_term_load($path[2]);

        // Use taxonomy term name for term with vid 2
        if ($term->vid == AREA_VID) {
          $title = $term->name;
          $link_path = isset($item['href']) ? $item['href'] : '';
        }
      }
    }

    $url = $link_path;
    $image_name = drupal_get_path_alias($link_path);
    $image_uri = $theme_path .'/images/rubrikker/'. $image_name .'.png';

    if (file_exists($image_uri)) {
      $image_html = theme('image', array('path' => $image_uri, 'alt' => $title));
    } else {
      $image_html = t($title);
    }
    return '<div id="big-title">' . l($image_html, $url, array('html' => TRUE)). '</div>';
  }
}

/**
 * Callback for share block.
 */
function kiv_mod_share_view() {

  if (arg(0) == 'node' && is_numeric(arg(1))) {

    $node = node_load(arg(1));
    $sitename = variable_get('site_name', "Default site name");
    $subject = t('Read @title on @sitename', array('@title' => $node->title, '@sitename' => $sitename));
    $url = url('node/'. $node->nid, array('absolute' => TRUE));

    $links = array(
      l(t('Share on facebook'), 'http://www.facebook.com/sharer/sharer.php?u=' . $url, array('attributes' => array('target' => '_blank', 'id' => 'facebook-share', 'alt' => 'Dela detta innehåll på Facebook'))),
      l(t('Share on twitter'), 'http://twitter.com/home?status=' . $url, array('attributes' => array('target' => '_blank', 'id' => 'twitter-share', 'alt' => 'Dela detta innehåll på Twitter'))),
      l(t('Mail article'), 'mailto:?subject=' . $subject . '&body=' . $url, array('attributes' => array('id' => 'mail-share', 'alt' => 'Dela detta innehåll via epost'))),
    );
    $items = array('items' => $links);

    return theme('item_list', $items, array('attributes' => array('class' => 'clearfix')));

  }
}

/**
 * Callback for latast news block.
 */
function kiv_mod_latest_news_view() {

  if (arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2))) {

    $tid = arg(2);
    $view = views_get_view('senaste_nytt');
    $display_id = 'panel_pane_2';
    $view->set_display($display_id);
    $item = $view->get_item($display_id, 'filter', 'field_category_tid');
    $view->override_path = 'nyheter';
    $view->set_arguments(array($tid));

    // Set tid to this term
    $item['value'] = array('value'=> $tid);

    $view->set_item($display_id, 'filter', 'date_filter', $item);
    return $view->render();
  }
}

function kiv_mod_menu_position_rule_alter(&$rule, &$context, &$rule_matches, &$set_breadcrumb = false){

  /* menu position returns true if a given rule matches - but it checks for all taxonomy_terms and not only main category */
  /* this fix will till menu_position that its a false positive since the found term isnt from the field_category field. */

  if($rule_matches){

    $rule_content_type = isset($rule->conditions['content_type']['content_type']) ? $rule->conditions['content_type']['content_type'] : false;
    $rule_tid = isset($rule->conditions['taxonomy']['tid']['0']) ? $rule->conditions['taxonomy']['tid']['0'] : false;
    $rule_vid = isset($rule->conditions['taxonomy']['vid']) ? $rule->conditions['taxonomy']['vid'] : false;

    if ($rule_tid && $rule_content_type && $rule_vid == 2) {

      if ($rule_tid == $context['node']->field_category['und']['0']['tid'] && in_array($context['node']->type, $rule_content_type)) {
        $rule_matches = true;
      } else {
        $rule_matches = false;
      }
    }
  }
}

/* Removes main categories which user hasn't acccess to, due to workbench_access restrictions */
function kiv_mod_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id == 'site_map_admin_settings_form') {
    $options = $form['site_map_content']['site_map_show_menus']['#options'];

    $footer = $options['menu-footer-meny'];
    unset($options['menu-footer-meny']);
    $options['menu-footer-meny'] = $footer;

    $form['site_map_content']['site_map_show_menus']['#options'] = $options;
  }


  /* Define which forms should be altered with available categories */
  $form_ids_with_workbench_access = array("event_node_form","nyhetsartikel_node_form", "informationssida_node_form", "blogg_node_form");

  if(in_array($form_id, $form_ids_with_workbench_access)){

    /* Load user sections */
    $current_user_sections = workbench_access_get_user_tree($user);

    /* Get current form language */
    $form_language = $form['language']['#value'];

    /* Get exposed category options and remove unnecessarily options */
    if(isset($form['field_category']['und']['#options'])) {
      $form_language = 'und';
    }

    // Remove categories that i don't have access to.
    $category_options = $form['field_category'][$form_language]['#options'];
    foreach($category_options as $key => $value){
      if(!isset($current_user_sections[$key])){
        unset($form['field_category'][$form_language]['#options'][$key]);
      } else {
        $section[] = $key;
      }
    }

    /* Hide workbench and set invalid default value */
    $form['workbench_access']['workbench_access_id']['#required'] = 0;
    $form['workbench_access']['workbench_access_id']['#type'] = 'hidden';
    $form['workbench_access']['workbench_access_id']['#default_value'] = $section['0']; /* Sets current section to first section available to pass validation */

    /* Add callback to replace workbench_access value with main category tid */
    $form['#submit'][] = '_kiv_mod_workbench_access_handler';
  }

  if ($form_id == 'informationssida_node_form') {
    // Get current users sections.
    $current_user_sections = workbench_access_get_user_tree($user);
    $valid_parents = array();
    $valid_paths = array();

    // Loop trough user sections and add ther path to $valid_paths.
    foreach ($current_user_sections as $key => $value) {
      $valid_paths[] = 'taxonomy/term/' . $key;
      $valid_paths[] = 'nyheter/' . $key;
      $valid_paths[] = 'blogg/' . $key;
    }

    // Loop trough menu options and remove those i don't have access to.
    // You should not be able to publish under menu items that does not exists in your section and only under nodes (not views, panels etc).
    $menu_options = $form['menu']['link']['parent']['#options'];
    foreach ($menu_options as $key => $value) {
      $mlid = explode(":", $key);
      $menu_object = menu_link_load($mlid['1']);

      if ((in_array($menu_object['link_path'], $valid_paths)) || (in_array($menu_object['plid'], $valid_parents)) && $menu_object['depth'] < 5) {
        if (strpos($menu_object['link_path'], 'node') === false && !in_array($menu_object['link_path'], $valid_paths)) {
          unset($form['menu']['link']['parent']['#options'][$key]);
        }
        $valid_parents[] = $mlid[1];
      }
      else {
        unset($form['menu']['link']['parent']['#options'][$key]);
      }
    }
  }

  if (strpos($form_id, '_node_form') !== false) {
    $form['#submit'][] = '_kiv_mod_related_term'; // Callback function to add main category to related cateogories.
  }

  // Makes some changes to mailchimp forms.
  if (strpos($form_id, 'mailchimp_lists_user_subscribe_form') !== false) {
    foreach ($form['mailchimp_lists'] as $key => $list) {
      if (is_array($form['mailchimp_lists'][$key])) {
        unset($form['mailchimp_lists'][$key]['title']);
        $form['mailchimp_lists'][$key]['interest_groups']['#type'] = 'container';
        $form['mailchimp_lists'][$key]['description'] = array(
          '#markup' => '<div class="newsletter-description">' . t('This is a description of newsletter...') . '</div>',
          '#weight' => 0,
        );
      }
    }
  }
}

/**
 * Callback form handler for workbench access alteration
 */
function _kiv_mod_workbench_access_handler($form, &$form_state) {
  $current_category = current($form_state['values']['field_category']);
  $form_state['values']['workbench_access_id'] = $current_category['0']['tid'];
}

/**
 * Adds main category to related cateogries.
 */
function _kiv_mod_related_term($form, &$form_state) {

  if (isset($form_state['values']['field_category']['und'][0]) && isset($form_state['values']['field_related_categories']['und'])) {

    $main_category = $form_state['values']['field_category']['und'][0];
    if (!in_array($main_category, $form_state['values']['field_related_categories']['und'])) {
      $form_state['values']['field_related_categories']['und'][] = $main_category;
    }
  }
}

function kiv_mod_preprocess_views_view(&$view) {

  if($view['name'] == 'senaste_events' && $view['display_id'] == 'panel_pane_1') {

    if (arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2))) {

      $term = taxonomy_term_load(arg(2));
      if ($term && isset($view['more']) && !empty($view['more'])) {
        $url_options = array(
          'query' => array('field_category_tid' => $term->tid),
        );
        $theme = views_theme_functions('views_more', $view['view']);
        $path = check_url(url('kalendarium', $url_options));
        $view['more'] = theme($theme, array('more_url' => $path, 'link_text' => t('View more events')));
      }

    }
  }
}

/**
 * Override toolbar for roles that are not allowed to see more than workbench menu item.
 */
function kiv_mod_preprocess_toolbar(&$vars) {

  // Only use custom toolbar for "Superredaktör".
  if (!user_access('access full toolbar')) {
    $links = $vars['toolbar']['toolbar_menu']['#links'];
    foreach($links as $key => $link) {
      if ($link['href'] != 'admin/workbench') {
        unset($vars['toolbar']['toolbar_menu']['#links'][$key]);
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function kiv_mod_field_formatter_info() {
  return array(
    'kiv_mod_alter_external_link' => array(
      'label' => t('Shortened URL w/o http:// in title - opens in new window'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'preamble_or_body' => array(
      'label' => t('Preamble if present, otherwise shortened node body'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function kiv_mod_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();

  switch ($display['type']) {
    case 'kiv_mod_alter_external_link':
      foreach ($items as $delta => $item) {
        // Remove the 'http://' and 'https://' from all link titles.
        $item['title'] = str_replace(array('http://', 'https://'), '', $item['title']);
        $item['attributes']['target'] = '_blank';

        $elements[$delta] = array(
          '#markup' => theme('link_formatter_link_default', array('element' => $item, 'field' => $instance)),
        );
      }
      break;

    case 'preamble_or_body':
      foreach ($items as $delta => $item) {

      }
      break;
  }

  return $elements;
}

/**
* Implements hook_entity_info_alter().
*/
function kiv_mod_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['webform_km'] = array(
    'label' => t('Webform'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_filter_info().
 */
function kiv_mod_filter_info() {
  $filters = array();
  $filters['strip_html'] = array(
    'title' => t('Strip HTML'),
    'description' => t('Strips the text from all HTML tags.'),
    'process callback' => '_strip_html_process',
    'weight' => -1, // See http://drupal.org/node/1061244
  );
  return $filters;
}

function _strip_html_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  $stripped_text = strip_tags($text);

  return $stripped_text;
}


/*
function kiv_mod_get_toolbar_menu_tree($menu_name = '') {
  $menus = menu_get_names();
  $tree = array();
  if (in_array($menu_name, $menus)) {
    $tree = menu_build_tree($menu_name, array(
      'min_depth' => 1,
      'max_depth' => 1,
    ));
  }
  return $tree;
}
*/

/**
 * hook_node_view();
 * @param unknown_type $node
 */
function kiv_mod_node_view($node, $view_mode) {
  // Set good messages that explains why it's disabled
  if(isset($node->webform['scheduler']['disabled']) && $node->webform['scheduler']['disabled'] == TRUE) {
    // Has not begun
    if ($node->webform['scheduler']['begin'] > 0 && REQUEST_TIME < $node->webform['scheduler']['begin']) {
      drupal_set_message('Anmälan för detta evenemang öppnar '.date('Y-m-d H:i', $node->webform['scheduler']['begin']));
    }

    // Ended
    if ($node->webform['scheduler']['end'] > 0 && REQUEST_TIME > $node->webform['scheduler']['end']) {
      drupal_set_message('Sista datum för att anmäla sig till detta evenemang var '.date('Y-m-d H:i', $node->webform['scheduler']['end']));
    }
  }
}

/**
 * hook_node_update();
 * @param unknown_type $node
 */
function kiv_mod_node_update($node) {
  if($node->sticky == 1) {
    $term = field_extract_value('node', $node, 'field_category', 0);
    if($term) {
      kiv_mod_unsticky_other_news_in_same_category($node->nid, $term->tid);
    }
  }
}

/**
 * hook_node_insert();
 * @param unknown_type $node
 */
function kiv_mod_node_insert($node) {
  if($node->sticky == 1) {
    $term = field_extract_value('node', $node, 'field_category', 0);
    if($term) {
      kiv_mod_unsticky_other_news_in_same_category($node->nid, $term->tid);
    }
  }
}

/**
 * Only have one sticky at a time for eache main category
 * @param unknown_type $nid
 * @param unknown_type $tid
 */
function kiv_mod_unsticky_other_news_in_same_category($nid, $tid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'nyhetsartikel')
  ->propertyCondition('status', 1)
  ->propertyCondition('sticky', 1)
  ->propertyCondition('nid', $nid, '!=')
  ->fieldCondition('field_category', 'tid', $tid);

  $result = $query->execute();
  if (isset($result['node'])) {
    $news_items_nids = array_keys($result['node']);
    $news_items = entity_load('node', $news_items_nids);

    foreach($news_items as $node) {
      $node->sticky = 0;
      node_save($node);
    }
  }
}

/**
 * Form builder; Output a search form for the search block's search box.
 *
 * @ingroup forms
 * @see search_box_form_submit()
 * @see search-block-form.tpl.php
 */
function kiv_mod_search_box_form($form, &$form_state) {
  $form['search_block_form'] = array(
      '#type' => 'textfield',
      '#title_display' => 'invisible',
      '#size' => 15,
      '#default_value' => '',
      '#attributes' => array(
        'title' => t('Skriv in vad du vill söka på!'),
        'placeholder' => t('Search')
       ),
  );
  $form['#attributes']['class'][] = 'search-block-form ';

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Search'));

  return $form;
}

/**
 * Process a block search form submission.
 */
function kiv_mod_search_box_form_submit($form, &$form_state) {
  // The search form relies on control of the redirect destination for its
  // functionality, so we override any static destination set in the request,
  // for example by drupal_access_denied() or drupal_not_found()
  // (see http://drupal.org/node/292565).
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  // Check to see if the form was submitted empty.
  // If it is empty, display an error message.
  // (This method is used instead of setting #required to TRUE for this field
  // because that results in a confusing error message.  It would say a plain
  // "field is required" because the search keywords field has no title.
  // The error message would also complain about a missing #title field.)
  if ($form_state['values']['search_block_form'] == '') {
    //form_set_error('keys', t('Please enter some keywords.'));
  }

  $form_state['redirect'] = array(
      'search',
      array('query' => array('query' => trim($form_state['values']['search_block_form']))),
  );
}